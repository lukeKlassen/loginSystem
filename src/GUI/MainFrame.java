/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Scanner;
import loginsystem.User;

/**
 *
 * @author 070035266
 */
public class MainFrame extends javax.swing.JFrame {
    

    //the user who is currently logged in
    private User loggedIn;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userNameLabel = new javax.swing.JLabel();
        userNameField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        loginBtn = new javax.swing.JButton();
        registerLabel = new javax.swing.JLabel();
        registerBtn = new javax.swing.JButton();
        registerFrame = new javax.swing.JInternalFrame();
        fNameField = new javax.swing.JTextField();
        lNameField = new javax.swing.JTextField();
        newUserNameField = new javax.swing.JTextField();
        newPasswordField = new javax.swing.JPasswordField();
        fNameLabel = new javax.swing.JLabel();
        lNameLabel = new javax.swing.JLabel();
        registerUserNameLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        addUserBtn = new javax.swing.JButton();
        dialogueLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        userNameLabel.setText("User Name:");

        passwordLabel.setText("Password:");

        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        registerLabel.setText("New To <insert company name here>? Register Here:");

        registerBtn.setText("Register");
        registerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerBtnActionPerformed(evt);
            }
        });

        registerFrame.setVisible(false);

        fNameLabel.setText("First Name:");

        lNameLabel.setText("Last Name:");

        registerUserNameLabel.setText("User Name:");

        jLabel1.setText("Password Name:");

        addUserBtn.setText("Register Account");
        addUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout registerFrameLayout = new javax.swing.GroupLayout(registerFrame.getContentPane());
        registerFrame.getContentPane().setLayout(registerFrameLayout);
        registerFrameLayout.setHorizontalGroup(
            registerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registerFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(registerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registerFrameLayout.createSequentialGroup()
                        .addComponent(fNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registerFrameLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registerFrameLayout.createSequentialGroup()
                        .addComponent(lNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registerFrameLayout.createSequentialGroup()
                        .addComponent(registerUserNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newUserNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(registerFrameLayout.createSequentialGroup()
                .addComponent(addUserBtn)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        registerFrameLayout.setVerticalGroup(
            registerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registerFrameLayout.createSequentialGroup()
                .addGroup(registerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(registerFrameLayout.createSequentialGroup()
                        .addGroup(registerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(registerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newUserNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(registerUserNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(registerFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(newPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addUserBtn))
        );

        dialogueLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(registerBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(registerFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loginBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dialogueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userNameLabel)
                            .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordLabel)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(registerLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(userNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dialogueLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loginBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addComponent(registerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(registerBtn)
                    .addComponent(registerFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        //when the user clicks the login button:
        //if either of the forms are not filled out
        if(new String(passwordField.getPassword()).isEmpty() || userNameField.getText().isEmpty()){
            //set the dialogue to tell them to fill it in
            dialogueLabel.setText("Please Fill In Login Info");
            //break from the method
            return;
        }
        User match = getUser(userNameField.getText());
        try{
            //If this user's encrypted password matches the given password when encrypted
            if(match.getPassword().equals( encrypt(new String(passwordField.getPassword())))){
                //log this user in
                loggedIn = match;
                //give them a login message
                dialogueLabel.setText("Welcome, " + loggedIn.getfName() + " " + loggedIn.getlName() + ", to the Matrix");
            //if the passwords do not match
            }else{
                //print that the information was incorrect
                dialogueLabel.setText("Incorrect User Name or Password");
            }
        //if an error was thrown by the encryption method
        }catch(NoSuchAlgorithmException e){
            //print out an error message
            dialogueLabel.setText("Error in Comparing Passwords");    
        }
            
    }//GEN-LAST:event_loginBtnActionPerformed

    private void registerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerBtnActionPerformed
        //if the registration box is not yet visible
        if(!registerFrame.isVisible()){
            //set it to visible
            registerFrame.setVisible(true);
            //expand the frame size
            this.setSize(getWidth()+50, getHeight()+300);
            //reset the register frame size
            registerFrame.setSize(300, 150);
       //otherwise, if the frame is already visible
        }else{
            //make in invisible
            registerFrame.setVisible(false);
            //reset frame size to original
            this.setSize(getWidth()-50, getHeight()-300);
        }
    }//GEN-LAST:event_registerBtnActionPerformed

    private void addUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserBtnActionPerformed
        //set the dialogue box's text to the error message printed by checking the user's info
        dialogueLabel.setText(checkInfo(newUserNameField.getText(),fNameField.getText(), lNameField.getText(), new String(newPasswordField.getPassword())));
        //if there was no error sent by checking their info
        if(dialogueLabel.getText() == null){
            //try to add their information to the file
            try{
                //initailize the text file
                File users = new File("src/loginsystem/users.txt");
                //create a printwriter for this file
                PrintWriter p = new PrintWriter(new FileWriter(users, true));
                //holds the encrypted password
                String encrypted ="";
                //try to encrypt the given password
                try{
                    encrypted = encrypt(new String(newPasswordField.getPassword()));
                //if the encryption algorithm was not correct
                }catch(NoSuchAlgorithmException e){
                    //print out the error
                    dialogueLabel.setText("Encryption Error!");
                    //break the method
                    return;
                }
                //add the user's info to the file
                p.println(newUserNameField.getText() + "," + fNameField.getText() + "," + lNameField.getText() + "," + encrypted);
                //close the printWriter
                p.close();
            //if there was an error in accessing the file
            }catch(IOException e){
                //print out that an error occured
                dialogueLabel.setText("Error in Registering User");
                //break from the method
                return;
            }
            //otherwise, set the dialogue label to say they are registered
            dialogueLabel.setText("You Are Now Registered! Login Here!");
            //reset the frame size
            this.setSize(getWidth()-50, getHeight()-300);
            //set the register frame to invisible
            registerFrame.setVisible(false);
            //move the cursor to the login field
            userNameField.requestFocusInWindow();
            //reset all of the registration info to empty strings
            newUserNameField.setText("");
            fNameField.setText("");
            lNameField.setText("");
            newPasswordField.setText("");
        }
    }//GEN-LAST:event_addUserBtnActionPerformed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        dialogueLabel.setText("");
    }//GEN-LAST:event_formMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    //checks the information entered in the registration of a new user
    public String checkInfo(String userName, String fName, String lName, String password){
        //if any of the fields are empty
        if( userName.isEmpty() || fName.isEmpty() || lName.isEmpty() || password.isEmpty()){
            //return that all forms must be filled
            return "All Forms Must Be Filled";
        //otherwise, if any of the strings contain commas (delimeter)
        }else if(userName.indexOf(',') != -1 || fName.indexOf(',') != -1 || lName.indexOf(',') != -1 || password.indexOf(',') != -1){
            //return that no commas can be user
            return "Commas Cannot Be Used";
        //otherwise, if the user name has already been taken
        }else if(userNameIsTaken(userName)){
            //return that the user already exists
            return "This user Already Exists";
        //otherwise, if the password is weak
        }else if(!isGoodPass(password)){
            //tell them their password sucks
            return "That Password is Weaksauce";
        //otherwise
        }else{
            //return null, all is good with their info
            return null;
        }
    }
    //checks if the given string is a suitable password
    public static boolean isGoodPass(String password){
        //intialize the bad passwords file
        File badPass = new File("src/GUI/badpass.txt");
        //create a scanner
        Scanner b;
        //try to
        try{
          //initialize the scanner with the given file
           b = new Scanner(badPass);
        //if an error was thrown
        }catch(FileNotFoundException e){
            //break the method
            return false;
        }
        //while the bad passwords file has more lines
        while(b.hasNextLine()){
            //see if the given password matches this line of text
            if(b.nextLine().equals(password)){
                //if they do return false, the password is one of the baddies
                return false;
            }
        }
        //otherwise, return true, the password must be good
        return true;
    }
    //checks whether the given string already exists as a username
    public boolean userNameIsTaken(String userName){
        return getUser(userName) != null;
    }

    //encrypts the password string, has potential to throw exception
    public String encrypt(String pass) throws NoSuchAlgorithmException{
        //create a message digest (encryptor) of algorithm type MD5
        MessageDigest md = MessageDigest.getInstance("MD5");
        //set message digest to the given passwords bytes
        md.update(pass.getBytes());
        //creaet a byte array of the encrypted password
        byte[] byteData = md.digest();
        //holds the printable password
        String readable = "";
        //for every byte in the encrypted passord
        for(int i=0; i <byteData.length; i++){
            //add its hexadecimal value to the string
            readable += (Integer.toHexString((byteData[i] & 0xFF) | 0x100).substring(1,3));
        }
        //return the hexadecimal string of the encypted password
        return readable;
    }
    public User getUser(String accountName){
        Scanner f;
        try{
            File users = new File("src/loginsystem/users.txt");
            f = new Scanner(users);
        }catch(IOException e){
            dialogueLabel.setText("Error In Reading File");
            return null;
        }
        while(f.hasNextLine()){
            String[] data = f.nextLine().split(",");
            if(data[0].equals(accountName)){
                return new User(data[0],data[1],data[2],data[3]);
            }
        }
        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUserBtn;
    private javax.swing.JLabel dialogueLabel;
    public javax.swing.JTextField fNameField;
    private javax.swing.JLabel fNameLabel;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JTextField lNameField;
    private javax.swing.JLabel lNameLabel;
    private javax.swing.JButton loginBtn;
    public javax.swing.JPasswordField newPasswordField;
    public javax.swing.JTextField newUserNameField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JButton registerBtn;
    private javax.swing.JInternalFrame registerFrame;
    private javax.swing.JLabel registerLabel;
    private javax.swing.JLabel registerUserNameLabel;
    private javax.swing.JTextField userNameField;
    private javax.swing.JLabel userNameLabel;
    // End of variables declaration//GEN-END:variables
}
